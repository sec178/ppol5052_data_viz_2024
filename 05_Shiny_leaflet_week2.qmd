---
title: "Shiny: Week two (leaflet)"
format:
  html:
    embed-resources: true
editor: visual
execute: 
  warning: false
  message: false
---

# Activity 1: outside of an app, create a leaflet map of DC liquor licenses

-   Read in the `Liquor_Licenses.geojson` file
-   Create a map where you use:
-   OpenStreetMap as the background tile
-   Circle marker to indicate each location of a license
-   Use the `clusterOptions = markerClusterOptions()` to cluster together locations of a high density of markers
-   Add a label to each point using the `TRADE_NAME` and `TYPE` columns

```{r}
library(tidyverse)
library(shiny)
library(here)
library(leaflet)
library(sf)
library(htmltools)
library(here)

liq <- st_read("Liquor_Licenses.geojson")

liq_map <- leaflet() %>%
    addProviderTiles("OpenStreetMap",
                     group = "OpenStreetMap")  %>%
    addLayersControl(baseGroups = c("OpenStreetMap",
                                    "ESRI"),
                     position = "topright") %>%
    addCircleMarkers(data = liq, lat = ~as.numeric(LATITUDE),
               lng = ~as.numeric(LONGITUDE),
               clusterOptions = markerClusterOptions(),
               label = paste(as.character(liq$TRADE_NAME), as.character(liq$TYPE)))

liq_map

```

# Activity 2: put that code in a Shiny app + add filtering option

-   Embed the above map in a Shiny app
-   Use the `selectInput` widget to allow users to filter the points by 1 or more types of establishments
-   When doing the filtering, create a `reactive` object on the server side that stores the filtered output

```{r}

ui <- fluidPage(
  # Application title
  titlePanel("Map of Licensed Liquor Stores in DC"),
  sidebarLayout(
        sidebarPanel(
          # Choosing country for bar plot input
          selectInput(inputId= "establishment_type",
                       label = "Type of Establishment",
                       choices = sort(unique(liq$TYPE)),
                      multiple = TRUE)),
  mainPanel(
    leafletOutput("liq_map")
  )
  
))

server <- function(input, output) {
  
  liq2 <- reactive({liq})
  
  output$liq_map <- renderLeaflet({leaflet() %>%
    addProviderTiles("OpenStreetMap",
                     group = "OpenStreetMap")  %>%
    addLayersControl(baseGroups = c("OpenStreetMap",
                                    "ESRI"),
                     position = "topright") %>%
    addCircleMarkers(data = liq2() %>% filter(TYPE %in% input$establishment_type), lat = ~as.numeric(LATITUDE),
               lng = ~as.numeric(LONGITUDE),
               clusterOptions = markerClusterOptions(),
               label = paste(as.character(liq2()$TRADE_NAME), as.character(liq2()$TYPE)))
    })
  
}

# Run the application 
shinyApp(ui = ui, server = server)

```

# Activity 3: modify the Shiny app to have one tab with the map, another with data to download

Create a two-tab app:

-   The first tab should contain the map
-   The second tab should contain a button to download a csv file reflecting the selected establishment types

```{r}


ui <- fluidPage(
  # Application title
  titlePanel("Map of Licensed Liquor Stores in DC"),
  
  sidebarLayout(
        sidebarPanel(
          # Choosing country for bar plot input
          selectInput(inputId= "establishment_type",
                       label = "Type of Establishment",
                       choices = sort(unique(liq$TYPE)),
                      multiple = TRUE)
    ),
  mainPanel(
    tabsetPanel(
      tabPanel("Map", leafletOutput("liq_map")),
      tabPanel("Download", downloadButton("data_download", "Download the results"))
      
    )
  )
  
))

server <- function(input, output) {
  
  liq2 <- reactive({liq})
  
  output$liq_map <- renderLeaflet({leaflet() %>%
    addProviderTiles("OpenStreetMap",
                     group = "OpenStreetMap")  %>%
    addLayersControl(baseGroups = c("OpenStreetMap",
                                    "ESRI"),
                     position = "topright") %>%
    addCircleMarkers(data = liq2() %>% filter(TYPE %in% input$establishment_type), lat = ~as.numeric(LATITUDE),
               lng = ~as.numeric(LONGITUDE),
               clusterOptions = markerClusterOptions(),
               label = paste(as.character(liq2()$TRADE_NAME), as.character(liq2()$TYPE)))
    })
  
  
  output$data_download <-  downloadHandler(
    filename = function(){paste("dc_liq-", 
                                Sys.time(),
                                ".csv", sep = "")},
    content = function(file){
              write.csv(liq2(), file)
    }
  )
}

# Run the application 
shinyApp(ui = ui, server = server)


```
